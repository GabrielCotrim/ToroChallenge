// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ToroChallenge.Infrastructure.Data;

namespace ToroChallenge.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20211124183256_InitialCreation")]
    partial class InitialCreation
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.12")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ToroChallenge.Domain.Entities.Ativo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("CurrentPrice")
                        .HasColumnType("float")
                        .HasColumnName("current_price");

                    b.Property<string>("Symbol")
                        .HasColumnType("varchar(6)")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.HasIndex("Symbol")
                        .IsUnique()
                        .HasFilter("[symbol] IS NOT NULL");

                    b.ToTable("tb_ativos", "identidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CurrentPrice = 28.440000000000001,
                            Symbol = "PETR4"
                        },
                        new
                        {
                            Id = 2,
                            CurrentPrice = 25.91,
                            Symbol = "MGLU3"
                        },
                        new
                        {
                            Id = 3,
                            CurrentPrice = 25.91,
                            Symbol = "VVAR3"
                        },
                        new
                        {
                            Id = 4,
                            CurrentPrice = 40.770000000000003,
                            Symbol = "SANB11"
                        },
                        new
                        {
                            Id = 5,
                            CurrentPrice = 115.98,
                            Symbol = "TORO4"
                        },
                        new
                        {
                            Id = 6,
                            CurrentPrice = 0.90000000000000002,
                            Symbol = "OIBR3"
                        });
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.Patrimonio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Saldo")
                        .HasColumnType("float")
                        .HasColumnName("saldo");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("int")
                        .HasColumnName("usuario_id");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("tb_patrimonios", "identidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Saldo = 100.0,
                            UsuarioId = 1
                        });
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.PatrimonioAtivos", b =>
                {
                    b.Property<int>("PatrimonioId")
                        .HasColumnType("int")
                        .HasColumnName("patrimonio_id");

                    b.Property<int>("AtivoId")
                        .HasColumnType("int")
                        .HasColumnName("ativo_id");

                    b.Property<int>("QuantidadeAtivos")
                        .HasColumnType("int")
                        .HasColumnName("quantidade_ativos");

                    b.HasKey("PatrimonioId", "AtivoId");

                    b.HasIndex("AtivoId");

                    b.ToTable("tb_patrimonio_ativos", "identidade");
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apelido")
                        .HasColumnType("varchar(30)")
                        .HasColumnName("apelido");

                    b.HasKey("Id");

                    b.ToTable("tb_usuarios", "identidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apelido = "Usuário Mock"
                        });
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.Patrimonio", b =>
                {
                    b.HasOne("ToroChallenge.Domain.Entities.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.PatrimonioAtivos", b =>
                {
                    b.HasOne("ToroChallenge.Domain.Entities.Ativo", "Ativo")
                        .WithMany("PatrimonioAtivos")
                        .HasForeignKey("AtivoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ToroChallenge.Domain.Entities.Patrimonio", "Patrimonio")
                        .WithMany("PatrimonioAtivos")
                        .HasForeignKey("PatrimonioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ativo");

                    b.Navigation("Patrimonio");
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.Ativo", b =>
                {
                    b.Navigation("PatrimonioAtivos");
                });

            modelBuilder.Entity("ToroChallenge.Domain.Entities.Patrimonio", b =>
                {
                    b.Navigation("PatrimonioAtivos");
                });
#pragma warning restore 612, 618
        }
    }
}
